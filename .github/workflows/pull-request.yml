
# ================= THIS FILE IS AUTOMATICALLY GENERATED =================
#
# To edit this file, please refer to the instructions in CONTRIBUTING.md.
#
# ========================================================================

name: CI
on:
  pull_request:
    branches: [main]
env:
  RUST_TOOLCHAIN: nightly-2022-03-09
  CACHE_KEY_SUFFIX: v20220331
  CARGO_TERM_COLOR: always
  RW_CI: true
  RW_SQLLOGICTEST_URL: https://github.com/risinglightdb/sqllogictest-rs/releases/download/v0.3.3/sqllogictest-linux-amd64.tar.gz
  RW_CARGO_MAKE_URL: https://github.com/sagiegurari/cargo-make/releases/download/0.35.10/cargo-make-v0.35.10-x86_64-unknown-linux-musl.zip
  RW_CARGO_MAKE_DIRECTORY: cargo-make-v0.35.10-x86_64-unknown-linux-musl
  RUSTFLAGS: -D warnings
  PROTOC_NO_VENDOR: true
jobs:
  start-runner-a:
    name: ec2-start-a
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.WUTAO_PAT }}
          ec2-image-id: ami-05a99cf0eb100c377
          ec2-instance-type: c5.4xlarge
          subnet-id: subnet-59743123
          security-group-id: sg-9ec32bfe
  start-runner-b:
    name: ec2-start-b
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.WUTAO_PAT }}
          ec2-image-id: ami-05a99cf0eb100c377
          ec2-instance-type: c5.4xlarge
          subnet-id: subnet-59743123
          security-group-id: sg-9ec32bfe
  stop-runner-a:
    name: ec2-stop-a
    needs:
      - start-runner-a
      - compute-node-build-dev
      - end-to-end-risedev-dev
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Stop EC2 runner A
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.WUTAO_PAT }}
          label: ${{ needs.start-runner-a.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner-a.outputs.ec2-instance-id }}
        if: ${{ always() }}
  stop-runner-b:
    name: ec2-stop-b
    needs:
      - start-runner-b
      - compute-node-test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Stop EC2 runner B
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.WUTAO_PAT }}
          label: ${{ needs.start-runner-b.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner-b.outputs.ec2-instance-id }}
        if: ${{ always() }}
  frontend-check:
    name: frontend-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run java style check, tests, and build
        run: |
          make java_check java_coverage_report java_build
      - uses: actions/upload-artifact@v2
        with:
          name: risingwave-fe-runnable.jar
          if-no-files-found: error
          path: |
            legacy/pgserver/build/libs/risingwave-fe-runnable.jar
  end-to-end-risedev-dev:
    name: e2e-test-risedev-dev
    needs:
      - compute-node-build-dev
      - frontend-check
      - start-runner-a
    runs-on: ${{ needs.start-runner-a.outputs.label }}
    container:
      image: public.ecr.aws/x5u3w5h6/risingwave-build-env:latest
      options: --security-opt seccomp=unconfined
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - uses: actions/download-artifact@v2
        name: Download risingwave binary
        with:
          name: risingwave-dev
          path: ./target/debug
      - uses: actions/download-artifact@v2
        name: Download frontend binary
        with:
          name: risingwave-fe-runnable.jar
          path: ./.risingwave/bin
      - uses: actions/download-artifact@v2
        name: Download playground binary
        with:
          name: risedev-playground-dev
          path: ./target/debug
      - name: Adjust permission
        run: |
          chmod +x ./target/debug/risingwave
          chmod +x ./target/debug/risedev-playground
      - name: Install required components
        run: |
          apt-get update -yy -o Acquire::Retries=3
          apt-get install --upgrade -yy tmux -o Acquire::Retries=3
      - name: Generate RiseDev CI config
        run: |
          cp risedev-components.ci.env risedev-components.user.env
      - name: Download sqllogictest
        run: |
          wget ${RW_SQLLOGICTEST_URL} -O - | tar xz && mv ${BINARY} ${DIR}/${BINARY}
          chmod +x ${DIR}/${BINARY}
        env:
          DIR: /usr/local/bin
          BINARY: sqllogictest
      - name: Download cargo-make
        run: |
          curl -fL ${RW_CARGO_MAKE_URL} -o ~/cargo-make.zip
          unzip ~/cargo-make.zip -d ~
          mv "${HOME}/${RW_CARGO_MAKE_DIRECTORY}" ~/cargo-make
      - name: Prepare RiseDev playground
        run: |
          ~/cargo-make/makers link-all-in-one-binaries
          ~/cargo-make/makers pre-start-playground
      - name: e2e test, streaming, Rust frontend, 3 node
        timeout-minutes: 2
        run: |
          ~/cargo-make/makers ci-start ci-3cn-1fe
          sqllogictest -p 4566 './e2e_test/v2/streaming/**/*.slt'
      - name: Kill cluster
        run: ~/cargo-make/makers ci-kill
      - name: e2e test, batch, Rust frontend, 1 node
        timeout-minutes: 2
        run: |
          RW_IMPLICIT_FLUSH=1 ~/cargo-make/makers ci-start ci-1cn-1fe
          sqllogictest -p 4566 './e2e_test/v2/ddl/**/*.slt'
          sqllogictest -p 4566 './e2e_test/v2/batch/**/*.slt'
      - name: Kill cluster
        run: ~/cargo-make/makers ci-kill
      - name: e2e test w/ Rust frontend ci-3node, batch, distributed
        timeout-minutes: 2
        run: |
          RW_DIST_QUERY=1 RW_IMPLICIT_FLUSH=1 ~/cargo-make/makers ci-start ci-3cn-1fe
          sqllogictest -p 4566 './e2e_test/v2/batch_distributed/**/*.slt'
      - name: Kill cluster
        run: ~/cargo-make/makers ci-kill
      - name: e2e test streaming 3-node
        timeout-minutes: 4
        run: |
          ~/cargo-make/makers ci-start ci-3node
          sqllogictest -p 4567 -d dev './e2e_test/streaming/**/*.slt'
      - name: Kill cluster
        run: ~/cargo-make/makers ci-kill
      - name: e2e test streaming 3-node w/o cache
        timeout-minutes: 4
        run: |
          RW_NO_CACHE=1 ~/cargo-make/makers ci-start ci-3node
          sqllogictest -p 4567 -d dev './e2e_test/streaming/**/*.slt'
      - name: Kill cluster
        run: ~/cargo-make/makers ci-kill
      - name: e2e test batch 3-node
        timeout-minutes: 2
        run: |
          RW_IMPLICIT_FLUSH=1 ~/cargo-make/makers ci-start ci-3node
          sqllogictest -p 4567 -d dev --engine risingwave './e2e_test/batch/**/*.slt'
      - name: Kill cluster
        run: ~/cargo-make/makers ci-kill
      - name: Dump last 300 lines of logs on failure
        if: ${{ failure() }}
        run: ~/cargo-make/makers logs
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        name: Upload RiseDev logs on failure (You may find it in artifacts)
        with:
          path: .risingwave/log/
          name: risedev-logs
  end-to-end-source:
    name: e2e-test-source
    needs:
      - compute-node-build-dev
      - frontend-check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PG_PORT: 5432
      RW_PORT: 4567
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Install required components
        run: |
          sudo apt-get update -yy -o Acquire::Retries=3
          sudo apt-get install --upgrade -yy tmux postgresql -o Acquire::Retries=3
      - name: Setup kafka cluster
        run: ./scripts/source/prepare_source.sh
      - name: Download sqllogictest
        run: |
          wget ${RW_SQLLOGICTEST_URL} -O - | tar xz && mv ${BINARY} ${DIR}/${BINARY}
          chmod +x ${DIR}/${BINARY}
        env:
          DIR: /usr/local/bin
          BINARY: sqllogictest
      - name: Download cargo-make
        run: |
          curl -fL ${RW_CARGO_MAKE_URL} -o ~/cargo-make.zip
          unzip ~/cargo-make.zip -d ~
          mv "${HOME}/${RW_CARGO_MAKE_DIRECTORY}" ~/cargo-make
      - uses: actions/download-artifact@v2
        name: Download risingwave binary
        with:
          name: risingwave-dev
          path: ./target/debug
      - uses: actions/download-artifact@v2
        name: Download frontend binary
        with:
          name: risingwave-fe-runnable.jar
          path: ./.risingwave/bin
      - uses: actions/download-artifact@v2
        name: Download playground binary
        with:
          name: risedev-playground-dev
          path: ./target/debug
      - uses: actions/download-artifact@v2
        name: Download risingwave_regress_test binary
        with:
          name: risingwave_regress_test-dev
          path: ./target/debug
      - name: Adjust permission
        run: |
          chmod +x ./target/debug/risingwave
          chmod +x ./target/debug/risedev-playground
          chmod +x ./target/debug/risingwave_regress_test
      - name: Run batch tests on Postgresql
        run: |
          timeout 10m sqllogictest -p ${{ env.PG_PORT }} './e2e_test/batch/**/*.slt'
      - name: Generate RiseDev CI config
        run: |
          cp risedev-components.ci.env risedev-components.user.env
      - name: Prepare RiseDev playground
        run: |
          ~/cargo-make/makers link-all-in-one-binaries
          ~/cargo-make/makers pre-start-playground
      - name: regress test batch 3-node
        run: |
          ~/cargo-make/makers clean-data
          RW_IMPLICIT_FLUSH=1 ~/cargo-make/makers dev ci-3node
          psql --version
          RUST_LOG=info timeout 40s target/debug/risingwave_regress_test -h 127.0.0.1 \
            -p ${{ env.RW_PORT }} \
            --input `pwd`/src/tests/regress/data \
            --output `pwd`/src/tests/regress/output \
            --schedule `pwd`/src/tests/regress/data/schedule
      - name: Kill cluster
        run: |
          ~/cargo-make/makers k
          ~/cargo-make/makers logs
          # ~/cargo-make/makers check-logs # regression test is bound to produce errors, so we don't check logs
      - name: e2e test source
        run: |
          ~/cargo-make/makers clean-data
          ~/cargo-make/makers dev ci-1node
          timeout 5m sqllogictest -p ${{ env.RW_PORT }} -d dev './e2e_test/source/**/*.slt'
      - name: Kill cluster
        run: |
          ~/cargo-make/makers k
          ~/cargo-make/makers logs
          ~/cargo-make/makers check-logs
      - name: e2e test source 3-node
        run: |
          ~/cargo-make/makers clean-data
          ~/cargo-make/makers dev ci-3node
          timeout 5m sqllogictest -p ${{ env.RW_PORT }} -d dev './e2e_test/source_distributed/**/*.slt'
      - name: Kill cluster
        run: |
          ~/cargo-make/makers k
          ~/cargo-make/makers logs
          ~/cargo-make/makers check-logs
      - name: Dump last 100 lines of logs on failure
        if: ${{ failure() }}
        run: ~/cargo-make/makers logs
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        name: Upload RiseDev logs on failure (You may find it in artifacts)
        with:
          path: .risingwave/log/
          name: risedev-logs-source
  compute-node-build-dev:
    needs: start-runner-a
    runs-on: ${{ needs.start-runner-a.outputs.label }}
    container:
      image: public.ecr.aws/x5u3w5h6/risingwave-build-env:latest
      options: --security-opt seccomp=unconfined
    name: compute-node-build-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt
      - name: Cache Cargo home
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.CACHE_KEY_SUFFIX }}-build
      - name: Install required tools
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-sort cargo-hakari
      - name: Run rust cargo-sort check
        run: |
          cargo sort -c -w
      - name: Run rust cargo-hakari check
        run: |
          cargo hakari verify
      - name: Run rust format check
        run: |
          cargo fmt --all -- --check
      - name: Build Rust components
        run: |
          cargo build --profile dev --features=all-in-one
      - name: Compress RisingWave debug info
        run: |
          objcopy --compress-debug-sections=zlib-gnu target/debug/risingwave
      - uses: actions/upload-artifact@v2
        with:
          name: risingwave-dev
          if-no-files-found: error
          path: |
            target/debug/risingwave
      - uses: actions/upload-artifact@v2
        with:
          name: risingwave_regress_test-dev
          if-no-files-found: error
          path: |
            target/debug/risingwave_regress_test
      - uses: actions/upload-artifact@v2
        with:
          name: risedev-playground-dev
          if-no-files-found: error
          path: |
            target/debug/risedev-playground
  compute-node-test:
    needs:
      - start-runner-b
    runs-on: ${{ needs.start-runner-b.outputs.label }}
    container:
      image: public.ecr.aws/x5u3w5h6/risingwave-build-env:latest
      options: --security-opt seccomp=unconfined
    name: compute-node-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: llvm-tools-preview, clippy
      - name: Cache Cargo home
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.CACHE_KEY_SUFFIX }}-test
      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest
      - name: Run rust clippy check
        run: |
          # If new CI checks are added, the one with `--locked` must be run first.
          cargo clippy --all-targets --locked -- -D warnings
      - name: Run rust doc check
        run: |
          cargo doc --document-private-items --no-deps
      - name: Run rust test with coverage
        run: |
          cargo llvm-cov nextest --lcov --output-path lcov.info --no-fail-fast
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: .
          flags: rust
  misc-check:
    runs-on: ubuntu-latest
    name: misc-check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install required tools
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${BINARY}.tar.gz -O - | tar xz && sudo mv ${BINARY} /usr/bin/yq
          sudo apt install -y protobuf-compiler -o Acquire::Retries=3
          curl -sSL \
            https://github.com/uber/prototool/releases/download/v1.8.0/prototool-$(uname -s)-$(uname -m).tar.gz | \
            sudo tar -C /usr/local --strip-components 1 -xz
          curl -sSL \
            "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m).tar.gz" | \
            sudo tar -xvzf - -C /usr/local --strip-components 1
        env:
          YQ_VERSION: v4.16.1
          BINARY: yq_linux_amd64
          BUF_VERSION: 1.0.0-rc6
      - name: Check CI workflows are up-to-date
        run: |
          ./.github/workflow-template/generate.sh --check
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          ignore_paths: legacy
      - name: Check protobuf code format
        run: |
          prototool format -d
        working-directory: proto
      - name: Lint protobuf
        run: |
          buf lint
        working-directory: proto
concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

# ================= THIS FILE IS AUTOMATICALLY GENERATED =================
#
# To edit this file, please refer to the instructions in CONTRIBUTING.md.
#
# ========================================================================

